"""
Django settings for server_config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import socket
from pathlib import Path

# Import Celery components
try:
    from celery.schedules import crontab
except ImportError:
    crontab = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Try to load dotenv if available
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    # dotenv is not required if environment variables are set elsewhere (like in Docker)
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get secret key from environment variable, fallback to a placeholder for development
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-!*vr(01rfyaawnofx_d#og=f+u+&li1fl(6tkbkw8e4#azcw5d",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"

ALLOWED_HOSTS = ["web", "localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "django_celery_results",  # For storing Celery task results in database
    "django_celery_beat",  # For periodic task scheduling
    "weather",  # Custom app for weather search
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # WhiteNoise pour les fichiers statiques
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server_config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # 'DIRS': [],
        "DIRS": [BASE_DIR / "weather" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server_config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Détection automatique si nous sommes en Docker ou en développement local
# Si nous sommes dans un conteneur Docker, 'web' sera résolvable comme nom d'hôte
def is_running_in_docker():
    try:
        socket.gethostbyname("db")  # Essayer de résoudre le nom d'hôte du service db
        return True
    except socket.gaierror:
        return False


# Utilisez SQLite en mode développement local, et PostgreSQL quand exécuté dans Docker
postgres_db = {
    "ENGINE": "django.db.backends.postgresql",
    "NAME": os.getenv("POSTGRES_DB", "devops_db"),
    "USER": os.getenv("POSTGRES_USER", "devops_user"),
    "PASSWORD": os.getenv("POSTGRES_PASSWORD", "devops_pass"),
    "HOST": os.getenv("POSTGRES_HOST", "db"),
    "PORT": os.getenv("POSTGRES_PORT", "5432"),
    "OPTIONS": {
        "connect_timeout": 5,
    },
    # Connexions persistantes pour de meilleures performances
    "CONN_MAX_AGE": 60,
}

sqlite_db = {
    "ENGINE": "django.db.backends.sqlite3",
    "NAME": BASE_DIR / "db.sqlite3",
}

# Essayer PostgreSQL si nous sommes dans Docker ou si USE_POSTGRES=True
use_postgres = (
    is_running_in_docker() or os.getenv("USE_POSTGRES", "False").lower() == "true"
)

if use_postgres:
    # First check if the module is available
    try:
        # Import outside the try block to avoid unhandled issues later
        __import__("psycopg2")
        DATABASES = {"default": postgres_db}
    except ImportError:
        print("WARNING: psycopg2 not found. Falling back to SQLite database")
        DATABASES = {"default": sqlite_db}
    except Exception as e:
        print(f"WARNING: Database error: {e}. Falling back to SQLite database")
        DATABASES = {"default": sqlite_db}
else:
    DATABASES = {"default": sqlite_db}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"] if (BASE_DIR / "static").exists() else []

# Configuration pour WhiteNoise
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
WHITENOISE_MAX_AGE = 31536000  # 1 an en secondes
WHITENOISE_AUTOREFRESH = DEBUG  # Recharge les fichiers en mode développement
WHITENOISE_USE_FINDERS = DEBUG  # Utilise les finders Django en mode développement

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# ================================
# CELERY CONFIGURATION
# ================================

# Celery Broker settings
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "amqp://guest:guest@rabbitmq:5672//")

# Celery Result Backend settings (store results in Django database)
CELERY_RESULT_BACKEND = "django-db"

# Celery serialization settings
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# Celery timezone settings
CELERY_TIMEZONE = TIME_ZONE

# Celery result expiration (results expire after 1 hour)
CELERY_RESULT_EXPIRES = 3600

# Celery task settings
CELERY_TASK_ALWAYS_EAGER = False  # Set to True for synchronous execution in tests
CELERY_TASK_EAGER_PROPAGATES = True
CELERY_TASK_IGNORE_RESULT = False

# Celery Beat settings for periodic tasks
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Celery worker settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_DISABLE_RATE_LIMITS = False

# Celery monitoring and logging
CELERY_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

# Celery Beat Schedule - Tâches périodiques automatisées
# ================================
if crontab:
    CELERY_BEAT_SCHEDULE = {
        "cleanup-old-searches": {
            "task": "weather.tasks.cleanup_old_searches",
            "schedule": crontab(hour=2, minute=0),
            "options": {"queue": "default"},
        },
        "generate-weather-statistics": {
            "task": "weather.tasks.generate_weather_statistics",
            "schedule": crontab(hour=6, minute=0),
            "options": {"queue": "default"},
        },
        "check-weather-alerts": {
            "task": "weather.tasks.send_weather_alerts",
            "schedule": crontab(minute=0, hour="*/2"),
            "options": {"queue": "default"},
        },
        "database-maintenance": {
            "task": "weather.tasks.database_maintenance",
            "schedule": crontab(hour=3, minute=0, day_of_week=0),
            "options": {"queue": "default"},
        },
        "export-weather-data-json": {
            "task": "weather.tasks.export_weather_data",
            "schedule": crontab(hour=7, minute=0, day_of_week=1),
            "args": ("json",),
            "options": {"queue": "default"},
        },
        "celery-health-check": {
            "task": "weather.tasks.test_celery_task",
            "schedule": crontab(minute="*/15"),
            "args": ("Health check - Système opérationnel",),
            "options": {
                "queue": "default",
                "expires": 900,
            },
        },
        "bulk-update-european-capitals": {
            "task": "weather.tasks.bulk_weather_update",
            "schedule": crontab(hour=8, minute=0),
            "args": (
                [
                    {"city": "Paris", "country": "FR"},
                    {"city": "London", "country": "GB"},
                    {"city": "Berlin", "country": "DE"},
                    {"city": "Madrid", "country": "ES"},
                    {"city": "Rome", "country": "IT"},
                    {"city": "Amsterdam", "country": "NL"},
                    {"city": "Brussels", "country": "BE"},
                    {"city": "Vienna", "country": "AT"},
                    {"city": "Prague", "country": "CZ"},
                    {"city": "Warsaw", "country": "PL"},
                ],
            ),
            "options": {
                "queue": "default",
                "soft_time_limit": 300,
                "time_limit": 600,
            },
        },
    }
else:
    CELERY_BEAT_SCHEDULE = {}

# Configuration additionnelle pour les tâches périodiques
CELERY_BEAT_SCHEDULE_FILENAME = "celerybeat-schedule"
DJANGO_CELERY_BEAT_TZ_AWARE = True
