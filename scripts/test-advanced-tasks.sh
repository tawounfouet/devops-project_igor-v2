#!/bin/bash

echo "üöÄ Test des t√¢ches Celery avanc√©es pour l'application m√©t√©o"
echo "============================================================"

# Fonction pour afficher des messages color√©s
show_info() {
    echo -e "\n\033[34m[INFO]\033[0m $1"
}

show_success() {
    echo -e "\033[32m[SUCCESS]\033[0m $1"
}

show_error() {
    echo -e "\033[31m[ERROR]\033[0m $1"
}

show_warning() {
    echo -e "\033[33m[WARNING]\033[0m $1"
}

# V√©rifier que Docker Compose est d√©marr√©
show_info "V√©rification de l'√©tat des services Docker..."
if ! docker-compose ps | grep -q "Up"; then
    show_warning "Services Docker non d√©marr√©s. Lancement..."
    docker-compose up -d
    sleep 10
fi

# Fonction pour tester une t√¢che Celery
test_celery_task() {
    local task_name=$1
    local task_args=$2
    local description=$3
    
    show_info "Test: $description"
    echo "T√¢che: $task_name"
    
    # Ex√©cuter la t√¢che dans le conteneur web
    if [ -n "$task_args" ]; then
        result=$(docker-compose exec -T web python manage.py shell -c "
from weather.tasks import $task_name
result = $task_name.delay($task_args)
print(f'Task ID: {result.id}')
print(f'Task State: {result.state}')
import time
time.sleep(5)
try:
    final_result = result.get(timeout=30)
    print('Task Result:')
    print(final_result)
except Exception as e:
    print(f'Error: {e}')
")
    else
        result=$(docker-compose exec -T web python manage.py shell -c "
from weather.tasks import $task_name
result = $task_name.delay()
print(f'Task ID: {result.id}')
print(f'Task State: {result.state}')
import time
time.sleep(5)
try:
    final_result = result.get(timeout=30)
    print('Task Result:')
    print(final_result)
except Exception as e:
    print(f'Error: {e}')
")
    fi
    
    echo "$result"
    
    if echo "$result" | grep -q "Task ID:"; then
        show_success "‚úÖ T√¢che ex√©cut√©e avec succ√®s"
    else
        show_error "‚ùå Erreur lors de l'ex√©cution de la t√¢che"
    fi
    
    echo "----------------------------------------"
}

# Tests des t√¢ches avanc√©es
echo "üß™ D√©but des tests des t√¢ches avanc√©es"

# 1. Test de g√©n√©ration de statistiques
test_celery_task "generate_weather_statistics" "" "G√©n√©ration des statistiques m√©t√©o"

# 2. Test d'alerte m√©t√©o
test_celery_task "send_weather_alerts" "" "V√©rification des alertes m√©t√©o extr√™mes"

# 3. Test d'export de donn√©es
test_celery_task "export_weather_data" "'json'" "Export des donn√©es m√©t√©o en JSON"

# 4. Test de nettoyage
test_celery_task "cleanup_old_searches" "" "Nettoyage des anciennes recherches"

# 5. Test de maintenance de base de donn√©es
test_celery_task "database_maintenance" "" "Maintenance de la base de donn√©es"

# 6. Test de mise √† jour en masse (avec une liste r√©duite)
show_info "Test: Mise √† jour en masse de quelques villes"
echo "T√¢che: bulk_weather_update"

bulk_test_result=$(docker-compose exec -T web python manage.py shell -c "
from weather.tasks import bulk_weather_update
cities = [
    {'city': 'Paris', 'country': 'FR'},
    {'city': 'London', 'country': 'GB'},
    {'city': 'Berlin', 'country': 'DE'}
]
result = bulk_weather_update.delay(cities)
print(f'Task ID: {result.id}')
print(f'Task State: {result.state}')
import time
time.sleep(10)
try:
    final_result = result.get(timeout=60)
    print('Task Result:')
    print(final_result)
except Exception as e:
    print(f'Error: {e}')
")

echo "$bulk_test_result"

if echo "$bulk_test_result" | grep -q "Task ID:"; then
    show_success "‚úÖ Mise √† jour en masse ex√©cut√©e avec succ√®s"
else
    show_error "‚ùå Erreur lors de la mise √† jour en masse"
fi

echo "----------------------------------------"

# Test des t√¢ches p√©riodiques programm√©es
show_info "V√©rification des t√¢ches p√©riodiques configur√©es"

periodic_tasks=$(docker-compose exec -T web python manage.py shell -c "
from django_celery_beat.models import PeriodicTask
tasks = PeriodicTask.objects.all()
print(f'Nombre de t√¢ches p√©riodiques: {tasks.count()}')
for task in tasks:
    print(f'- {task.name}: {task.task} ({task.crontab})')
")

echo "$periodic_tasks"

# V√©rification de l'√©tat des workers Celery
show_info "√âtat des workers Celery"
celery_status=$(docker-compose exec -T web celery -A server_config inspect active)
echo "$celery_status"

# V√©rification des r√©sultats des t√¢ches dans la base de donn√©es
show_info "Derniers r√©sultats des t√¢ches stock√©s en base"
task_results=$(docker-compose exec -T web python manage.py shell -c "
from django_celery_results.models import TaskResult
recent_tasks = TaskResult.objects.order_by('-date_created')[:10]
print(f'Nombre total de r√©sultats: {TaskResult.objects.count()}')
print('Derni√®res t√¢ches:')
for task in recent_tasks:
    print(f'- {task.task_name}: {task.status} ({task.date_created})')
")

echo "$task_results"

# R√©sum√© final
show_info "üìä R√©sum√© du test des t√¢ches avanc√©es"
echo "‚úÖ T√¢ches de g√©n√©ration de statistiques"
echo "‚úÖ Syst√®me d'alertes m√©t√©o"
echo "‚úÖ Export de donn√©es"
echo "‚úÖ Nettoyage automatique"
echo "‚úÖ Maintenance de base de donn√©es"
echo "‚úÖ Mise √† jour en masse"
echo "‚úÖ Configuration des t√¢ches p√©riodiques"
echo "‚úÖ Stockage des r√©sultats en base de donn√©es"

show_success "üéâ Tests des t√¢ches Celery avanc√©es termin√©s!"
echo "Les t√¢ches p√©riodiques sont maintenant configur√©es et s'ex√©cuteront automatiquement selon le planning d√©fini."
